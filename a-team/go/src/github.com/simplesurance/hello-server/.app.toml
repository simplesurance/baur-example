# Application name
name = "hello-server"

[[Task]]

  # Task name
  name = "build"

  # Command to execute.
  # The first element is the command, the following its arguments.
  command = [
    "bash", "-c",
    """
      docker run \
        --rm \
        --init \
        --user="$(id -u):$(id -g)" \
        -v "{{ .Root }}/a-team/go":/code \
        -w /code/src/github.com/simplesurance/hello-server \
        -e HOME=/tmp/ \
        -e GOPATH=/code/ \
        golang@sha256:e7462ca504afc789d289f2bb5fd471815cc11833439d2fe4e61915b190045359 \
        go build -o dist/hello-server github.com/simplesurance/hello-server/
    """
    ]

  # Inputs are tracked, when they change the task is rerun.
  [Task.Input]
    [[Task.Input.GolangSources]]
      # Go package queries, the source files of matching packages and
      # their imported packages are resolved to files.
      # Format:
      # 	file=<RELATIVE-PATH>
      # 	fileglob=<GLOB-PATTERN>	 -> Supports double-star
      # 	Everything else is passed to the Go query tool (go list by default).
      # 	See also the patterns described at:
      # 	<https://github.com/golang/tools/blob/bc8aaaa29e0665201b38fa5cb5d47826788fa249/go/packages/doc.go#L17>.
      # Files from Golang's stdlib are ignored.
      queries = ["./..."]

      # Environment when running the go query tool.
      environment = [
        "GOPATH={{ .Root }}/a-team/go",
        "GO111MODULE=off",
      ]

      # List of command-line flags to be passed through to the Go query tool.
      build_flags = []

      # If true queries are resolved to test files, otherwise testfiles are ignored.
      tests = false

  # Artifacts produced by the Task.command and their upload destinations.
  [Task.Output]
    [[Task.Output.File]]

      # Path relative to the application directory.
      path = "dist/hello-server"

      [[Task.Output.File.FileCopy]]
        # Destination directory
        path = "/tmp/baur_build_artifacts/{{ .AppName }}-{{ gitCommit }}"
