
# Name of the application
name = "myredis"

# Task-includes that the task inherits.
# Includes are specified in the format <filepath>#<ID>.
# Paths are relative to the application directory.
includes = []

[[Task]]
  name = "build"

  # Command to execute.
  # The first element is the command, the following it's arguments.
  # If the command element contains no path seperators,
  # the path is looked up via the $PATH environment variable.
  command = ["docker", "build", "--iidfile", ".container.id", "."]

  # Input or Output includes that the task inherits.
  # Includes are specified in the format <filepath>#<ID>.
  # Paths are relative to the application directory.
  includes = []

  # Specification of task inputs like source files, Makefiles, etc
  [Task.Input]

    [[Task.Input.Files]]

      # Relative path to source files.
      # Golang's Glob syntax (https://golang.org/pkg/path/filepath/#Match)
      # and ** is supported to match files recursively.
      paths = ["Dockerfile"]

      # If true, baur will not fail if a Path resolves to 0 files.
      optional = false

      # Ignore files that are not tracked in git.
      git_tracked_only = true

  # Specification of task outputs produced by the Task.command
  [Task.Output]

    [[Task.Output.DockerImage]]

      # Path to a file that is created by the [Task.Command] and contains the image ID of the produced image (docker build --iidfile).
      idfile = ".container.id"

      [[Task.Output.DockerImage.RegistryUpload]]

        # Registry address in the format <HOST>:[<PORT>]. If it's empty the default from the docker agent is used.
        registry = "localhost:5000"

        # Repository name
        repository = "baur-example/{{ .AppName }}"

        # Tag that is applied to the image.
        tag = "{{ gitCommit }}"
