# Application name
name = "myredis"

[[Task]]
  # Task name
  name = "build"

  # Command to execute.
  # The first element is the command, the following its arguments.
  command = ["docker", "build", "--iidfile", ".container.id", "."]

  # Inputs are tracked, when they change the task is rerun.
   [Task.Input]
     [[Task.Input.Files]]

       # Glob patterns that match files.
       # All Paths are relative to the application directory.
       # Golang's Glob syntax (https://golang.org/pkg/path/filepath/#Match)
       # and ** is supported to match files recursively.
       paths = ["Dockerfile"]

  # Artifacts produced by the Task.command and their upload destinations.
  [Task.Output]
    [[Task.Output.DockerImage]]

      # File containing the image ID of the produced image (docker build --iidfile).
      idfile = ".container.id"

      [[Task.Output.DockerImage.RegistryUpload]]

        # Registry address in the format <HOST>:[<PORT>]. If it's empty the docker agent's default is used.
        registry = "localhost:5000"

        repository = "baur-example/{{ .AppName }}"
        tag = "{{ gitCommit }}"

      [[Task.Output.DockerImage.RegistryUpload]]

        # Registry address in the format <HOST>:[<PORT>]. If it's empty the docker agent's default is used.
        registry = "localhost:5000"

        repository = "baur-example/{{ .AppName }}"
        tag = "latest"
